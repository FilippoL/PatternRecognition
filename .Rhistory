new_image = flipped_image + digit_example
indices_cap_pixel_values = which(new_image>255)
new_image[indices_cap_pixel_values] = 255
return (t(new_image))
}
show_image_from_data(mnist.dat, 1)
mnist.summary = data.frame(t(sapply( pixels_data , function(x) cbind(mean = mean(x) ,
sd = sd(x) ,
median = median(x) ,
minimum = min(x) ,
maximum = max(x) ,
s.size = length(x)))))
colnames(mnist.summary) = c("mean","sd","median","minimum","maximum","size")
head(mnist.summary[mnist.summary$sd==0,])
indices_of_useless_features = which(mnist.summary$sd == 0)
actual_digit = mnist.dat[90,-1]
actual_digit[,indices_of_useless_features] = 125
digit_example = show_image_data(actual_digit)
image(digit_example, axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
indices_of_useless_features = which(mnist.summary$sd < 1)
actual_digit = mnist.dat[400,-1]
actual_digit[,indices_of_useless_features] = 125
digit_example = show_image_data(actual_digit)
image(digit_example, axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
# Plot count of each digit's pixel in barplot and then display it in a table
label_distribution = table(mnist.dat[,1])
barplot(label_distribution, col=rainbow(10, 0.5), main="Digits in dataset")
# as.data.frame(mnist.dat) %>% group_by(label) %>% summarise(count = n())
expected_accuracy_on_majority_label_classification = label_distribution[2] / sum(label_distribution)
sprintf("Accuracy if 1 was predicted for all labels: %.2f %%", expected_accuracy_on_majority_label_classification * 100)
actual_digit = mnist.dat[450,-1]
indices_of_useful_features = which(actual_digit < 248)
actual_digit[,indices_of_useful_features] = 0
digit_example = show_image_data(actual_digit)
image(digit_example, axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
hist(as.numeric(actual_digit), main="Frequency of pixels values", xlab="Pixel Value", ylab="Frequency")
hist.data = hist(as.matrix(mnist.dat[,-1]), breaks=32, main="Frequency of pixels values", xlab="Pixel Value", ylab="Frequency")
hist.data$counts = log10(hist.data$counts)
plot(hist.data, main="Frequency of scaled pixels values", xlab="Pixel Value", ylab="Frequency")
axis(side=1, at=seq(0, 256, 8))
cleaned_images = t(apply(pixels_data, MARGIN = 1, FUN=function(x) replace(x, which(x < 5), 0)))
image_density = apply(cleaned_images, MARGIN=1, FUN=function(x) sum(x))
image_density_per_pixel = apply(data.frame(image_density), MARGIN=1, FUN=function(x) sum(x)/784)
data = cbind.data.frame(density=image_density,
density_per_pixel=scale(image_density_per_pixel),
scaled_density = scale(image_density),
label=mnist.dat$label)
data2 = cbind.data.frame(log_dens=scale(log(image_density_per_pixel)),
sqrt_dens=scale(sqrt(image_density_per_pixel)),
sin_dens=scale(sin(image_density_per_pixel)),
tanh_dens=tanh(scale(image_density_per_pixel)),  #TODO: Explain why scale after
scaled_density = scale(image_density),
squared_dens=scale(image_density^2),
label=mnist.dat$label)
head(data)
head(data2)
summary_per_digit = rbind.data.frame(tapply(data$density_per_pixel, data$label,  function(x) cbind(mean = mean(x) ,
sd = sd(x) ,
median = median(x) ,
minimum = min(x) ,
maximum = max(x),
s.size = length(x))
))
rownames(summary_per_digit) = c("mean","sd","median","minimum","maximum","size")
#TODO: Plot all distributions
data.frame(t(summary_per_digit))
cormat = dist(t(summary_per_digit[c("mean","sd"),]))
data.frame(as.matrix(cormat))
cormat = dist(t(summary_per_digit[c("mean","sd","median","minimum","maximum"),]))
melted_cormat <- melt(as.matrix(cormat))
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
density_model = multinom(label ~ density_per_pixel, data, maxit=1000)
predicted = predict(density_model, data)
confmat = table(data$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
density_model2 = multinom(label ~ scaled_density + log_dens, data2, maxit=1000)
predicted = predict(density_model2, data2)
confmat = table(data2$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
cleaned_images = t(apply(pixels_data, MARGIN = 1, FUN=function(x) replace(x, which(x < 5), 0)))
combined_images = t(apply(cleaned_images, MARGIN=1, FUN=combine_images))
# combined_images = cleaned_images %>% combine_images
actual_digit = combined_images[445,]
# digit_example = show_image_data(actual_digit)
# flipped_image = Augmentation(digit_example, flip_mode = "vertical")
#
# new_image = flipped_image + digit_example
#
# indices_cap_pixel_values = which(new_image>255)
#
# new_image[indices_cap_pixel_values] = 255
image(matrix(actual_digit, nrow=28,ncol=28,byrow=T), axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
image_density = apply(combined_images, MARGIN=1, FUN=function(x) sum(x))
image_density_per_pixel = apply(data.frame(image_density), MARGIN=1, FUN=function(x) sum(x)/784)
data = cbind.data.frame(density=image_density,
log_scaled_density=scale(log(image_density_per_pixel)),
scaled_density = scale(image_density),
label=mnist.dat$label)
head(data)
density_model = multinom(label ~ scaled_density, data, maxit=1000)
predicted = predict(density_model, data)
confmat = table(data$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
pca_model = prcomp(combined_images[,-indices_of_useless_features])
principal_components = as.matrix(pca_model$x)
data3 = cbind.data.frame(scaled_density = scale(image_density),
first_pca = scale(principal_components[,1]),
label=mnist.dat$label)
density_model3 = multinom(label ~ scaled_density + first_pca, data3, maxit=1000)
density_model3
predicted = predict(density_model3, data3)
confmat = table(data2$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
image_density = apply(cleaned_images, MARGIN=1, FUN=function(x) sum(x))
image_density_combined = apply(combined_images, MARGIN=1, FUN=function(x) sum(x))
data = cbind.data.frame(density=image_density,
scaled_density=scale(image_density),
scaled_density_combined = scale(image_density_combined),
label=mnist.dat$label)
head(data)
density_model = multinom(label ~ scaled_density + scaled_density_combined, data, maxit=1000)
predicted = predict(density_model, data)
confmat = table(data$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
library(OpenImageR)
library(dplyr)
library(iterators)
library(nnet)
library(reshape2)
library(ggplot2)
library(glmnet)
library(e1071)
library(factoextra)
mnist.dat <- read.csv("mnist.csv")
pixels_data = mnist.dat[,-1]
scaled_pixels_data = scale(pixels_data)
scaled_pixels_data[is.na(scaled_pixels_data)] = 0 #Replacing NaN with 0
mnist.dat$label = as.factor(mnist.dat$label)
show_image_from_data = function(data, row) {
sample_image = t(matrix(as.numeric(data[row,-1]),nrow=28,ncol=28,byrow=T)[c(28:1),,drop = FALSE])
return (image(sample_image, axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1))
}
show_image_data = function(actual_digit) {
return (t(matrix(as.numeric(actual_digit),nrow=28,ncol=28,byrow=T))[,c(28:1),drop = FALSE])
}
combine_images = function(normal_digit){
actual_digit = normal_digit
digit_example = show_image_data(actual_digit)
flipped_image = Augmentation(digit_example, flip_mode = "vertical")
new_image = flipped_image + digit_example
indices_cap_pixel_values = which(new_image>255)
new_image[indices_cap_pixel_values] = 255
return (t(new_image))
}
edge_detect = function(normal_digit){
digit_example = show_image_data(normal_digit)
detect_image = edge_detection(digit_example,  method = 'Scharr', conv_mode = 'same')
return (t(new_image))
}
show_image_from_data(mnist.dat, 1)
mnist.dat <- read.csv("mnist.csv")
pixels_data = mnist.dat[,-1]
scaled_pixels_data = scale(pixels_data)
scaled_pixels_data[is.na(scaled_pixels_data)] = 0 #Replacing NaN with 0
mnist.dat$label = as.factor(mnist.dat$label)
show_image_from_data = function(data, row) {
sample_image = t(matrix(as.numeric(data[row,-1]),nrow=28,ncol=28,byrow=T)[c(28:1),,drop = FALSE])
return (image(sample_image, axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1))
}
show_image_data = function(actual_digit) {
return (t(matrix(as.numeric(actual_digit),nrow=28,ncol=28,byrow=T))[,c(28:1),drop = FALSE])
}
combine_images = function(normal_digit){
actual_digit = normal_digit
digit_example = show_image_data(actual_digit)
flipped_image = Augmentation(digit_example, flip_mode = "vertical")
new_image = flipped_image + digit_example
indices_cap_pixel_values = which(new_image>255)
new_image[indices_cap_pixel_values] = 255
return (t(new_image))
}
edge_detect = function(normal_digit){
digit_example = show_image_data(normal_digit)
detect_image = edge_detection(digit_example,  method = 'Scharr', conv_mode = 'same')
return (t(new_image))
}
show_image_from_data(mnist.dat, 1)
mnist.summary = data.frame(t(sapply( pixels_data , function(x) cbind(mean = mean(x) ,
sd = sd(x) ,
median = median(x) ,
minimum = min(x) ,
maximum = max(x) ,
s.size = length(x)))))
colnames(mnist.summary) = c("mean","sd","median","minimum","maximum","size")
indices_of_useless_features = which(mnist.summary$sd == 0)
actual_digit = mnist.dat[90,-1]
actual_digit[,indices_of_useless_features] = 125
digit_example = show_image_data(actual_digit)
image(digit_example, axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
indices_of_useless_features = which(mnist.summary$sd < 1)
actual_digit = mnist.dat[400,-1]
actual_digit[,indices_of_useless_features] = 125
digit_example = show_image_data(actual_digit)
image(digit_example, axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
# Plot count of each digit's pixel in barplot and then display it in a table
label_distribution = table(mnist.dat[,1])
barplot(label_distribution, col=rainbow(10, 0.5), main="Digits in dataset")
# as.data.frame(mnist.dat) %>% group_by(label) %>% summarise(count = n())
cleaned_images = t(apply(pixels_data, MARGIN = 1, FUN=function(x) replace(x, which(x < 5), 0)))
combined_images = t(apply(cleaned_images, MARGIN=1, FUN=edge_detect))
show_image_from_data = function(data, row) {
sample_image = t(matrix(as.numeric(data[row,-1]),nrow=28,ncol=28,byrow=T)[c(28:1),,drop = FALSE])
return (image(sample_image, axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1))
}
show_image_data = function(actual_digit) {
return (t(matrix(as.numeric(actual_digit),nrow=28,ncol=28,byrow=T))[,c(28:1),drop = FALSE])
}
combine_images = function(normal_digit){
actual_digit = normal_digit
digit_example = show_image_data(actual_digit)
flipped_image = Augmentation(digit_example, flip_mode = "vertical")
new_image = flipped_image + digit_example
indices_cap_pixel_values = which(new_image>255)
new_image[indices_cap_pixel_values] = 255
return (t(new_image))
}
edge_detect = function(normal_digit){
digit_example = show_image_data(normal_digit)
detect_image = edge_detection(digit_example,  method = 'Scharr', conv_mode = 'same')
return (t(detect_image))
}
show_image_from_data(mnist.dat, 1)
cleaned_images = t(apply(pixels_data, MARGIN = 1, FUN=function(x) replace(x, which(x < 5), 0)))
combined_images = t(apply(cleaned_images, MARGIN=1, FUN=edge_detect))
actual_digit = combined_images[445,]
image(matrix(actual_digit, nrow=28,ncol=28,byrow=T), axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
image_density = apply(cleaned_images, MARGIN=1, FUN=function(x) sum(x))
image_density_combined = apply(combined_images, MARGIN=1, FUN=function(x) sum(x))
data = cbind.data.frame(density=image_density,
scaled_density=scale(image_density),
scaled_density_combined = scale(image_density_combined),
label=mnist.dat$label)
head(data)
density_model = multinom(label ~ scaled_density + scaled_density_combined, data, maxit=1000)
predicted = predict(density_model, data)
confmat = table(data$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
density_model = multinom(label ~ scaled_density_combined, data, maxit=1000)
predicted = predict(density_model, data)
confmat = table(data$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
pca_model = prcomp(scaled_pixels_data[,-indices_of_useless_features])
test
principal_components = as.matrix(pca_model$x)
data3 = cbind.data.frame(scaled_density = scale(image_density),
first_pca = scale(principal_components[,1]),
label=mnist.dat$label)
head(data3)
density_model3 = multinom(label ~ first_pca, data3, maxit=1000)
density_model3
predicted = predict(density_model3, data3)
confmat = table(data2$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
pca_model = prcomp(combined_images[,-indices_of_useless_features])
principal_components = as.matrix(pca_model$x)
data3 = cbind.data.frame(scaled_density = scale(image_density),
first_pca = scale(principal_components[,1]),
label=mnist.dat$label)
density_model3 = multinom(label ~ scaled_density + first_pca, data3, maxit=1000)
density_model3
predicted = predict(density_model3, data3)
confmat = table(data2$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
pca_model = prcomp(cleaned_images[,-indices_of_useless_features])
principal_components = as.matrix(pca_model$x)
data3 = cbind.data.frame(scaled_density = scale(image_density),
first_pca = scale(principal_components[,1]),
scaled_density_combined = scale(image_density_combined),
label=mnist.dat$label)
density_model3 = multinom(label ~ scaled_density + first_pca, data3, maxit=1000)
density_model3
predicted = predict(density_model3, data3)
confmat = table(data2$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
data3 = cbind.data.frame(scaled_density = scale(image_density),
first_pca = scale(principal_components[,1]),
scaled_density_combined = scale(image_density_combined),
label=mnist.dat$label)
density_model3 = multinom(label ~ scaled_density_combined + first_pca, data3, maxit=1000)
density_model3
predicted = predict(density_model3, data3)
confmat = table(data2$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
data3 = cbind.data.frame(scaled_density = scale(image_density),
first_pca = scale(principal_components[,1]),
scaled_density_combined = scale(image_density_combined),
label=mnist.dat$label)
density_model3 = multinom(label ~ scaled_density + first_pca, data3, maxit=1000)
density_model3
predicted = predict(density_model3, data3)
confmat = table(data2$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
indices_of_useless_features = which(mnist.summary$sd == 0)
actual_digit = mnist.dat[90,-1]
actual_digit[,indices_of_useless_features] = 125
digit_example = show_image_data(actual_digit)
image(digit_example, axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
pca_model = prcomp(scaled_pixels_data[,-indices_of_useless_features])
principal_components = as.matrix(pca_model$x)
data3 = cbind.data.frame(scaled_density = scale(image_density),
first_pca = scale(principal_components[,1]),
label=mnist.dat$label)
head(data3)
density_model3 = multinom(label ~ first_pca, data3, maxit=1000)
density_model3
predicted = predict(density_model3, data3)
confmat = table(data2$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
cormat = dist(t(summary_per_digit[c("mean","sd"),]))
melted_cormat <- melt(as.matrix(cormat))
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
cormat = dist(t(summary_per_digit[c("mean","sd"),]))
melted_cormat <- melt(log(as.matrix(cormat)))
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
cormat = dist(t(summary_per_digit[c("mean","sd"),]))
melted_cormat <- melt(exp(as.matrix(cormat)))
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
cormat = dist(t(summary_per_digit[c("mean","sd"),]))
melted_cormat <- melt(log(as.matrix(cormat)))
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
cormat = dist(t(summary_per_digit[c("mean","sd"),]))
melted_cormat <- melt(as.matrix(cormat))
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
cormat = dist(t(summary_per_digit[c("mean","sd"),]))
melted_cormat <- melt(log(as.matrix(cormat)))
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
cormat = dist(t(summary_per_digit[c("mean","sd"),]))
melted_cormat <- melt(as.matrix(cormat))
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
cormat = dist(t(summary_per_digit[c("mean","sd"),]))
melted_cormat <- melt(log(as.matrix(cormat)))
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
melted_cormat <- melt(as.matrix(confmat))
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
distance_matrix = dist(t(summary_per_digit[c("mean","sd","median","minimum","maximum"),]))
melted_distance_matrix <- melt(as.matrix(distance_matrix))
ggplot(data = melted_distance_matrix, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
melted_confmat <- melt(as.matrix(confmat))
# ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
density_model = multinom(label ~ density_per_pixel, data, maxit=1000)
cleaned_images = t(apply(pixels_data, MARGIN = 1, FUN=function(x) replace(x, which(x < 5), 0)))
image_density = apply(cleaned_images, MARGIN=1, FUN=function(x) sum(x))
image_density_per_pixel = apply(data.frame(image_density), MARGIN=1, FUN=function(x) sum(x)/784)
data = cbind.data.frame(density=image_density,
density_per_pixel=scale(image_density_per_pixel),
scaled_density = scale(image_density),
label=mnist.dat$label)
data2 = cbind.data.frame(log_dens=scale(log(image_density_per_pixel)),
sqrt_dens=scale(sqrt(image_density_per_pixel)),
sin_dens=scale(sin(image_density_per_pixel)),
tanh_dens=tanh(scale(image_density_per_pixel)),  #TODO: Explain why scale after
scaled_density = scale(image_density),
squared_dens=scale(image_density^2),
label=mnist.dat$label)
head(data)
head(data2)
density_model = multinom(label ~ density_per_pixel, data, maxit=1000)
predicted = predict(density_model, data)
confmat = table(data$label, predicted)
sum(diag(confmat))/sum(confmat)
View(confmat)
melted_confmat <- melt(as.matrix(confmat))
ggplot(data = melted_cormat, aes(x=Var1, y=predicted, fill=Freq)) + geom_tile()
View(melted_cormat)
melted_confmat <- melt(as.matrix(confmat))
ggplot(data = melted_cormat, aes(x=Var1, y=predicted, fill=value)) + geom_tile()
melted_confmat <- melt(log(as.matrix(confmat)))
ggplot(data = melted_cormat, aes(x=Var1, y=predicted, fill=value)) + geom_tile()
melted_confmat <- melt(as.matrix(confmat))
# ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
melted_confmat <- melt(as.matrix(confmat))
melted_confmat
# ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
melted_confmat <- melt(as.matrix(confmat))
melted_confmat
ggplot(data =  melted_confmat, mapping = aes(x = Var1, y = predicted)) +
geom_tile(aes(fill = value), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", value)), vjust = 1) +
scale_fill_gradient(low = "blue", high = "red") +
theme_bw() + theme(legend.position = "none")
# ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
melted_confmat <- melt(as.matrix(confmat))
melted_confmat
ggplot(data =  melted_confmat, mapping = aes(x = Var1, y = predicted)) +
geom_tile(aes(fill = value), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", value)), vjust = 1) +
scale_fill_gradient(low = "blue", high = "red") +
theme_bw() + theme(legend.position = "none") + scale_x_discrete(name="Digit", limits=0:9)
# ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
melted_confmat <- melt(as.matrix(confmat))
melted_confmat
ggplot(data =  melted_confmat, mapping = aes(x = Var1, y = predicted)) +
geom_tile(aes(fill = value), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", value)), vjust = 1) +
scale_fill_gradient(low = "blue", high = "red") +
theme_bw() + theme(legend.position = "none") +
scale_x_discrete(name="Digit", limits=0:9) + scale_y_discrete(name="Digit", limits=0:9)
# ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
melted_confmat <- melt(as.matrix(confmat))
ggplot(data =  melted_confmat, mapping = aes(x = Var1, y = predicted)) +
geom_tile(aes(fill = value), colour = "white") +
geom_text(aes(label = sprintf("%1.0f", value)), vjust = 1) +
scale_fill_gradient(low = "blue", high = "red") +
theme_bw() + theme(legend.position = "none") +
scale_x_discrete(name="Digit", limits=0:9) + scale_y_discrete(name="Digit", limits=0:9)
# ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
```{r}
```{r}
density_model
data_for_boxplots = cbind.data.frame(density=image_density,
label=mnist.dat$label)
head(head(data)
)
data_for_boxplots = cbind.data.frame(density=image_density,
label=mnist.dat$label)
head(head(data))
data_for_boxplots = cbind.data.frame(density=image_density,
label=mnist.dat$label)
head(data_for_boxplots)
data_for_boxplots = cbind.data.frame(density=image_density,
label=mnist.dat$label)
head(data_for_boxplots)
boxplot(data_for_boxplots)
data_for_boxplots = cbind.data.frame(density=image_density,
label=mnist.dat$label)
head(data_for_boxplots)
boxplot(label~image_density, data_for_boxplots)
data_for_boxplots = cbind.data.frame(density=image_density,
label=mnist.dat$label)
head(data_for_boxplots)
boxplot(label~., data_for_boxplots)
data_for_boxplots = cbind.data.frame(density=image_density,
label=mnist.dat$label)
head(data_for_boxplots)
boxplot(.~scaled_density, data_for_boxplots)
data_for_boxplots = cbind.data.frame(density=image_density,
label=mnist.dat$label)
head(data_for_boxplots)
boxplot(label~scaled_density, data_for_boxplots)
data_for_boxplots = cbind.data.frame(density=image_density,
label=mnist.dat$label)
head(data_for_boxplots)
boxplot(label~density, data_for_boxplots)
data_for_boxplots = cbind.data.frame(density=image_density,
label=mnist.dat$label)
head(data_for_boxplots)
boxplot(as.numeric(label)~density, data_for_boxplots)
data_for_boxplots = cbind.data.frame(density=image_density,
label=mnist.dat$label)
head(dcast(formula=label~density, data=data_for_boxplots))
# boxplot(label~density, )
data_for_boxplots = cbind.data.frame(density=image_density,
label=mnist.dat$label)
head(dcast(formula=density~label, data=data_for_boxplots))
# boxplot(label~density, )
data_for_boxplots = cbind.data.frame(density=image_density,
label=mnist.dat$label)
# head(dcast(formula=density~label, data=data_for_boxplots))
boxplot(density~label,data_for_boxplots)
data_for_boxplots = cbind.data.frame(density=scale(image_density),
label=mnist.dat$label)
# head(dcast(formula=density~label, data=data_for_boxplots))
boxplot(density~label,data_for_boxplots)
data_for_boxplots = cbind.data.frame(density=image_density,
label=mnist.dat$label)
# head(dcast(formula=density~label, data=data_for_boxplots))
boxplot(density~label,data_for_boxplots)
data_for_boxplots = cbind.data.frame(density=image_density,
label=mnist.dat$label)
# head(dcast(formula=density~label, data=data_for_boxplots))
boxplot(density~label,data_for_boxplots)
data_for_boxplots = cbind.data.frame(density=image_density,
label=mnist.dat$label)
# head(dcast(formula=density~label, data=data_for_boxplots))
boxplot(density~label,data_for_boxplots[,500])
data_for_boxplots = cbind.data.frame(density=image_density,
label=mnist.dat$label)
# head(dcast(formula=density~label, data=data_for_boxplots))
boxplot(density~label,data_for_boxplots[1:500,])
data_for_boxplots = cbind.data.frame(density=image_density,
label=mnist.dat$label)
# head(dcast(formula=density~label, data=data_for_boxplots))
boxplot(density~label,sample_n(data_for_boxplots, 5000))
data_for_boxplots = cbind.data.frame(density=image_density,
label=mnist.dat$label)
# head(dcast(formula=density~label, data=data_for_boxplots))
boxplot(density~label,sample_n(data_for_boxplots, 500))
# head(dcast(formula=density~label, data=data_for_boxplots))
boxplot(density~label,sample_n(data_for_boxplots, 5000))
