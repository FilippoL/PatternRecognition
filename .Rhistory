library(iterators)
library(nnet)
library(reshape2)
library(ggplot2)
library(ROCR)
install.packages("ROCR")
library(OpenImageR)
library(dplyr)
library(iterators)
library(nnet)
library(reshape2)
library(ggplot2)
library(ROCR)
library(OpenImageR)
library(dplyr)
library(iterators)
library(nnet)
library(reshape2)
library(ggplot2)
library(ROCR)
sum(diag(confmat))/sum(confmat)
perf1 <- performance(predicted, "prec", "rec")
predicted = prediction(density_model, data)
predicted = predict(density_model, data)
confmat = table(data$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
perf1 <- performance(as.prediction(predicted), "prec", "rec")
sum(diag(confmat))/sum(confmat)
perf1 <- performance(predicted, "prec", "rec")
sum(diag(confmat))/sum(confmat)
prediction(predicted, data$label)
sum(diag(confmat))/sum(confmat)
prediction(as.matrix(predicted), data$label)
sum(diag(confmat))/sum(confmat)
density_model = multinom(label ~ ., data, maxit=1000)
density_model
predicted = predict(density_model, data)
confmat = table(data$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
density_model = multinom(label ~ scaled_density, data, maxit=1000)
density_model
predicted = predict(density_model, data)
confmat = table(data$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
predicted = predict(density_model, data)
confmat = table(data$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
hist(as.numeric(actual_digit), main="Frequency of pixels values.", xlab="Pixel Value")
hist(as.numeric(actual_digit), main="Frequency of pixels values", xlab="Pixel Value")
hist(as.numeric(actual_digit), main="Frequency of pixels values", xlab="Pixel Value", ylab="Frequency")
hist.data = hist(as.matrix(mnist.dat[,-1]), breaks=32, main="Frequency of pixels values", xlab="Pixel Value", ylab="Frequency")
hist.data$counts = log10(hist.data$counts)
plot(hist.data, main="Frequency of scaled pixels values", xlab="Pixel Value", ylab="Frequency")
axis(side=1, at=seq(0, 256, 8))
cormat = dist(t(summary_per_digit[c("mean","sd","median","minimum","maximum"),]))
melted_cormat <- melt(as.matrix(cormat))
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value), main="Distance between digits", xlab="Digit", ylab="Digit") + geom_tile()
cormat = dist(t(summary_per_digit[c("mean","sd","median","minimum","maximum"),]))
melted_cormat <- melt(as.matrix(cormat))
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
sum(diag(confmat))/sum(confmat)
density(confmat)
sum(diag(confmat))/sum(confmat)
plot(density(confmat))
sum(diag(confmat))/sum(confmat)
density_model = multinom(label ~ scaled_density, data, maxit=1000)
#density_model
predicted = predict(density_model, data)
confmat = table(data$label, predicted)
sum(diag(confmat))/sum(confmat)
density_model = multinom(label ~ density_per_pixel, data, maxit=1000)
#density_model
predicted = predict(density_model, data)
confmat = table(data$label, predicted)
sum(diag(confmat))/sum(confmat)
# indices_of_useful_features =
# function(x) x[which(x < 248)] = 0
cleaned_images = t(apply(pixels_data, MARGIN = 1, FUN=function(x) replace(x, which(x < 125), 0)))
image_density = apply(cleaned_images, MARGIN=1, FUN=function(x) sum(x))
image_density_per_pixel = apply(data.frame(image_density), MARGIN=1, FUN=function(x) sum(x)/784) # Calculate density
#data = cbind.data.frame(density=image_density,
#                        density_per_pixel=scale(image_density_per_pixel),
#                        scaled_density = scale(image_density),
#                        label=mnist.dat$label)
data = cbind.data.frame(log_dens=log(scale(image_density_per_pixel)),
ten_log_dens=log10(scale(image_density_per_pixel)),
squared_dens=scale(image_density)^2,
cubed_dens=scale(image_density)^3,
label=mnist.dat$label)
head(data)
# indices_of_useful_features =
# function(x) x[which(x < 248)] = 0
cleaned_images = t(apply(pixels_data, MARGIN = 1, FUN=function(x) replace(x, which(x < 125), 0)))
image_density = apply(cleaned_images, MARGIN=1, FUN=function(x) sum(x))
image_density_per_pixel = apply(data.frame(image_density), MARGIN=1, FUN=function(x) sum(x)/784) # Calculate density
#data = cbind.data.frame(density=image_density,
#                        density_per_pixel=scale(image_density_per_pixel),
#                        scaled_density = scale(image_density),
#                        label=mnist.dat$label)
data = cbind.data.frame(log_dens=log(scale(image_density_per_pixel)),
ten_log_dens=log10(scale(image_density_per_pixel)),
squared_dens=scale(image_density)^2,
cubed_dens=scale(image_density)^3,
label=mnist.dat$label)
data$ten_log_dens[is.na(data$ten_log_dens)] = 0
data$log_dens[is.na(data$ten_log_dens)] = 0
head(data)
# indices_of_useful_features =
# function(x) x[which(x < 248)] = 0
cleaned_images = t(apply(pixels_data, MARGIN = 1, FUN=function(x) replace(x, which(x < 125), 0)))
image_density = apply(cleaned_images, MARGIN=1, FUN=function(x) sum(x))
image_density_per_pixel = apply(data.frame(image_density), MARGIN=1, FUN=function(x) sum(x)/784) # Calculate density
#data = cbind.data.frame(density=image_density,
#                        density_per_pixel=scale(image_density_per_pixel),
#                        scaled_density = scale(image_density),
#                        label=mnist.dat$label)
data = cbind.data.frame(log_dens=log(scale(image_density_per_pixel)),
ten_log_dens=log10(scale(image_density_per_pixel)),
squared_dens=scale(image_density)^2,
cubed_dens=scale(image_density)^3,
label=mnist.dat$label)
data$ten_log_dens[is.na(data$ten_log_dens)] = 0
data$log_dens[is.na(data$log_dens)] = 0
head(data)
# indices_of_useful_features =
# function(x) x[which(x < 248)] = 0
cleaned_images = t(apply(pixels_data, MARGIN = 1, FUN=function(x) replace(x, which(x < 125), 0)))
image_density = apply(cleaned_images, MARGIN=1, FUN=function(x) sum(x))
image_density_per_pixel = apply(data.frame(image_density), MARGIN=1, FUN=function(x) sum(x)/784) # Calculate density
#data = cbind.data.frame(density=image_density,
#                        density_per_pixel=scale(image_density_per_pixel),
#                        scaled_density = scale(image_density),
#                        label=mnist.dat$label)
data = cbind.data.frame(log_dens=log(scale(image_density_per_pixel)),
ten_log_dens=log10(scale(image_density_per_pixel)),
squared_dens=(scale(image_density))^2,
cubed_dens=(scale(image_density))^3,
label=mnist.dat$label)
data$ten_log_dens[is.na(data$ten_log_dens)] = 0
data$log_dens[is.na(data$log_dens)] = 0
head(data)
# indices_of_useful_features =
# function(x) x[which(x < 248)] = 0
cleaned_images = t(apply(pixels_data, MARGIN = 1, FUN=function(x) replace(x, which(x < 125), 0)))
image_density = apply(cleaned_images, MARGIN=1, FUN=function(x) sum(x))
image_density_per_pixel = apply(data.frame(image_density), MARGIN=1, FUN=function(x) sum(x)/784) # Calculate density
#data = cbind.data.frame(density=image_density,
#                        density_per_pixel=scale(image_density_per_pixel),
#                        scaled_density = scale(image_density),
#                        label=mnist.dat$label)
data = cbind.data.frame(log_dens=log(scale(image_density_per_pixel)),
ten_log_dens=log10(scale(image_density_per_pixel)),
squared_dens=(scale(image_density))^2,
cubed_dens=abs((scale(image_density))^3),
label=mnist.dat$label)
data$ten_log_dens[is.na(data$ten_log_dens)] = 0
data$log_dens[is.na(data$log_dens)] = 0
head(data)
density_model = multinom(label ~ abs(density_per_pixel), data, maxit=1000)
# indices_of_useful_features =
# function(x) x[which(x < 248)] = 0
cleaned_images = t(apply(pixels_data, MARGIN = 1, FUN=function(x) replace(x, which(x < 125), 0)))
image_density = apply(cleaned_images, MARGIN=1, FUN=function(x) sum(x))
image_density_per_pixel = apply(data.frame(image_density), MARGIN=1, FUN=function(x) sum(x)/784) # Calculate density
data = cbind.data.frame(density=image_density,
density_per_pixel=scale(image_density_per_pixel),
scaled_density = scale(image_density),
label=mnist.dat$label)
data_2 = cbind.data.frame(log_dens=log(scale(image_density_per_pixel)),
ten_log_dens=log10(scale(image_density_per_pixel)),
squared_dens=(scale(image_density))^2,
cubed_dens=abs((scale(image_density))^3),
label=mnist.dat$label)
data$ten_log_dens[is.na(data$ten_log_dens)] = 0
# indices_of_useful_features =
# function(x) x[which(x < 248)] = 0
cleaned_images = t(apply(pixels_data, MARGIN = 1, FUN=function(x) replace(x, which(x < 125), 0)))
image_density = apply(cleaned_images, MARGIN=1, FUN=function(x) sum(x))
image_density_per_pixel = apply(data.frame(image_density), MARGIN=1, FUN=function(x) sum(x)/784) # Calculate density
data = cbind.data.frame(density=image_density,
density_per_pixel=scale(image_density_per_pixel),
scaled_density = scale(image_density),
label=mnist.dat$label)
data_2 = cbind.data.frame(log_dens=log(scale(image_density_per_pixel)),
ten_log_dens=log10(scale(image_density_per_pixel)),
squared_dens=(scale(image_density))^2,
cubed_dens=abs((scale(image_density))^3),
label=mnist.dat$label)
data2$ten_log_dens[is.na(data$ten_log_dens)] = 0
# indices_of_useful_features =
# function(x) x[which(x < 248)] = 0
cleaned_images = t(apply(pixels_data, MARGIN = 1, FUN=function(x) replace(x, which(x < 125), 0)))
image_density = apply(cleaned_images, MARGIN=1, FUN=function(x) sum(x))
image_density_per_pixel = apply(data.frame(image_density), MARGIN=1, FUN=function(x) sum(x)/784) # Calculate density
data = cbind.data.frame(density=image_density,
density_per_pixel=scale(image_density_per_pixel),
scaled_density = scale(image_density),
label=mnist.dat$label)
data2 = cbind.data.frame(log_dens=log(scale(image_density_per_pixel)),
ten_log_dens=log10(scale(image_density_per_pixel)),
squared_dens=(scale(image_density))^2,
cubed_dens=abs((scale(image_density))^3),
label=mnist.dat$label)
data2$ten_log_dens[is.na(data$ten_log_dens)] = 0
data2$log_dens[is.na(data$log_dens)] = 0
head(data)
head(data2)
# indices_of_useful_features =
# function(x) x[which(x < 248)] = 0
cleaned_images = t(apply(pixels_data, MARGIN = 1, FUN=function(x) replace(x, which(x < 125), 0)))
image_density = apply(cleaned_images, MARGIN=1, FUN=function(x) sum(x))
image_density_per_pixel = apply(data.frame(image_density), MARGIN=1, FUN=function(x) sum(x)/784) # Calculate density
data = cbind.data.frame(density=image_density,
density_per_pixel=scale(image_density_per_pixel),
scaled_density = scale(image_density),
label=mnist.dat$label)
data2 = cbind.data.frame(log_dens=log(scale(image_density_per_pixel)),
ten_log_dens=log10(scale(image_density_per_pixel)),
squared_dens=(scale(image_density))^2,
cubed_dens=abs((scale(image_density))^3),
label=mnist.dat$label)
data2$ten_log_dens[is.na(data2$ten_log_dens)] = 0
data2$log_dens[is.na(data2$log_dens)] = 0
head(data)
head(data2)
predicted = predict(density_model, data)
confmat = table(data$label, predicted)
confmat
density_model = multinom(label ~ abs(density_per_pixel), data, maxit=1000)
density_model
predicted = predict(density_model, data)
confmat = table(data$label, predicted)
confmat
density_model = multinom(label ~ density_per_pixel, data, maxit=1000)
density_model
density_model = multinom(label ~ density_per_pixel, data, maxit=1000)
density_model
predicted = predict(density_model, data)
confmat = table(data$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
density_model2 = multinom(label ~ log_dens + squared_dens, data2, maxit=1000)
density_model2
predicted = predict(density_model2, data2)
confmat = table(data2$label, predicted)
confmat
density_model2 = multinom(label ~ log_dens + squared_dens, data2, maxit=1000)
density_model2
predicted = predict(density_model2, data2)
confmat = table(data2$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
density_model2 = multinom(label ~ ten_log_dens, data2, maxit=1000)
density_model2
predicted = predict(density_model2, data2)
confmat = table(data2$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
density_model2 = multinom(label ~ (log_dens + cubed_dens), data2, maxit=1000)
density_model2
predicted = predict(density_model2, data2)
confmat = table(data2$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
density_model2 = multinom(log_dens + cubed_dens, data2, maxit=1000)
density_model2 = multinom(data2$log_dens + data2$cubed_dens, data2, maxit=1000)
density_model2 = multinom(log_dens ~ ., data2, maxit=1000)
density_model2 = multinom(log_dens, data2, maxit=1000)
density_model2 = multinom(label ~ (log_dens + squared_dens), data2, maxit=1000)
density_model2
predicted = predict(density_model2, data2)
confmat = table(data2$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
density_model2 = multinom(label ~ (log_dens + density), data2, maxit=1000)
density_model2 = multinom(label ~ (log_dens + cubed_dens), data2, maxit=1000)
density_model2
predicted = predict(density_model2, data2)
confmat = table(data2$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
density_model2 = multinom(label ~ (cubed_dens), data2, maxit=1000)
density_model2
predicted = predict(density_model2, data2)
confmat = table(data2$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
density_model2 = multinom(label ~ (density_per_pixel+cubed_dens), data2, maxit=1000)
density_model2 = multinom(label ~ (data$density_per_pixel+cubed_dens), data2, maxit=1000)
density_model2
predicted = predict(density_model2, data2)
confmat = table(data2$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
density_model2 = multinom(label ~ (data$density_per_pixel+log_dens), data2, maxit=1000)
density_model2
predicted = predict(density_model2, data2)
confmat = table(data2$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
density_model2 = multinom(label ~ (cubed_dens), data2, maxit=1000)
density_model2
predicted = predict(density_model2, data2)
confmat = table(data2$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
#install.packages("caret")
library(OpenImageR)
library(dplyr)
library(iterators)
library(nnet)
library(reshape2)
library(ggplot2)
library(caret)
mnist.dat <- read.csv("mnist.csv")
pixels_data = mnist.dat[,-1]
scaled_pixels_data = scale(pixels_data)
scaled_pixels_data[is.na(scaled_pixels_data)] = 0 #Replacing NaN with 0
mnist.dat$label = as.factor(mnist.dat$label)
show_image_from_data = function(data, row) {
sample_image = t(matrix(as.numeric(data[row,-1]),nrow=28,ncol=28,byrow=T)[c(28:1),,drop = FALSE])
return (image(sample_image, axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1))
}
show_image_data = function(actual_digit) {
return (t(matrix(as.numeric(actual_digit),nrow=28,ncol=28,byrow=T))[,c(28:1),drop = FALSE])
}
show_image_from_data(mnist.dat, 1)
mnist.summary = data.frame(t(sapply( pixels_data , function(x) cbind(mean = mean(x) ,
sd = sd(x) ,
median = median(x) ,
minimum = min(x) ,
maximum = max(x) ,
s.size = length(x)))))
colnames(mnist.summary) = c("mean","sd","median","minimum","maximum","size")
head(mnist.summary[mnist.summary$sd==0,])
indices_of_useless_features = which(mnist.summary$sd == 0)
actual_digit = mnist.dat[90,-1]
actual_digit[,indices_of_useless_features] = 125
digit_example = show_image_data(actual_digit)
image(digit_example, axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
indices_of_useless_features = which(mnist.summary$sd < 1)
actual_digit = mnist.dat[400,-1]
actual_digit[,indices_of_useless_features] = 125
digit_example = show_image_data(actual_digit)
image(digit_example, axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
# Plot count of each digit's pixel in barplot and then display it in a table
label_distribution = table(mnist.dat[,1])
barplot(label_distribution, col=rainbow(10, 0.5), main="Digits in dataset")
# as.data.frame(mnist.dat) %>% group_by(label) %>% summarise(count = n())
expected_accuracy_on_majority_label_classification = label_distribution[2] / sum(label_distribution)
sprintf("Accuracy if 1 was predicted for all labels: %.2f %%", expected_accuracy_on_majority_label_classification * 100)
actual_digit = mnist.dat[450,-1]
indices_of_useful_features = which(actual_digit < 248)
actual_digit[,indices_of_useful_features] = 0
digit_example = show_image_data(actual_digit)
image(digit_example, axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
hist(as.numeric(actual_digit), main="Frequency of pixels values", xlab="Pixel Value", ylab="Frequency")
hist.data = hist(as.matrix(mnist.dat[,-1]), breaks=32, main="Frequency of pixels values", xlab="Pixel Value", ylab="Frequency")
hist.data$counts = log10(hist.data$counts)
plot(hist.data, main="Frequency of scaled pixels values", xlab="Pixel Value", ylab="Frequency")
axis(side=1, at=seq(0, 256, 8))
# indices_of_useful_features =
# function(x) x[which(x < 248)] = 0
cleaned_images = t(apply(pixels_data, MARGIN = 1, FUN=function(x) replace(x, which(x < 5), 0)))
image_density = apply(cleaned_images, MARGIN=1, FUN=function(x) sum(x))
image_density_per_pixel = apply(data.frame(image_density), MARGIN=1, FUN=function(x) sum(x)/784) # Calculate density
data = cbind.data.frame(density=image_density,
density_per_pixel=scale(image_density_per_pixel),
scaled_density = scale(image_density),
label=mnist.dat$label)
data2 = cbind.data.frame(log_dens=log(scale(image_density_per_pixel)),
ten_log_dens=log10(scale(image_density_per_pixel)),
scaled_density = scale(image_density),
squared_dens=(scale(image_density))^2,
cubed_dens=abs((scale(image_density))^3),
label=mnist.dat$label)
data2$ten_log_dens[is.na(data2$ten_log_dens)] = 0
data2$log_dens[is.na(data2$log_dens)] = 0
head(data)
head(data2)
summary_per_digit = rbind.data.frame(tapply(data$density_per_pixel, data$label,  function(x) cbind(mean = mean(x) ,
sd = sd(x) ,
median = median(x) ,
minimum = min(x) ,
maximum = max(x),
s.size = length(x))
))
rownames(summary_per_digit) = c("mean","sd","median","minimum","maximum","size")
#TODO: Plot all distributions
data.frame(t(summary_per_digit))
cormat = dist(t(summary_per_digit[c("mean","sd"),]))
data.frame(as.matrix(cormat))
cormat = dist(t(summary_per_digit[c("mean","sd","median","minimum","maximum"),]))
melted_cormat <- melt(as.matrix(cormat))
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
density_model = multinom(label ~ density_per_pixel, data, maxit=1000)
density_model
density_model2 = multinom(label ~ scaled_density + log_dens, data2, maxit=1000)
density_model2
predicted = predict(density_model2, data2)
confmat = table(data2$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
predicted = predict(density_model, data)
confmat = table(data$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
data_for_ml = cbind.data.frame(label=mnist.dat$label, scaled_pixels_data)
pixels_data = mnist.dat[,-1]
down_sampled_images = pixels_data %>% as.matrix(ncol=28, nrow=28) %>% down_sample_image(factor=2)
scaled_pixels_data = scale(pixels_data)
scaled_pixels_data[is.na(scaled_pixels_data)] = 0 #Replacing NaN with 0
data_for_ml = cbind.data.frame(label=mnist.dat$label, scaled_pixels_data)
training_data = sample(data_for_ml, c(1:5000))
#train.control = trainControl(method = "cv", number = 8)
#cv_model = train(label~., data=data_for_ml, method=c(multinom), trControl=train.control, maxit=1000)
#cv_model
training_data = sample(data_for_ml, c(1:5000))
#validation_data = setdiff(data_for_ml, training_data)
#dim(validation_data)
View(training_data)
help("sample")
pixels_data = mnist.dat[,-1]
down_sampled_images = pixels_data %>% as.matrix(ncol=28, nrow=28) %>% down_sample_image(factor=2)
scaled_pixels_data = scale(pixels_data)
scaled_pixels_data[is.na(scaled_pixels_data)] = 0 #Replacing NaN with 0
data_for_ml = cbind.data.frame(label=mnist.dat$label, scaled_pixels_data)
training_data = sample(data_for_ml, 5000)
View(density_model2)
pixels_data = mnist.dat[,-1]
down_sampled_images = pixels_data %>% as.matrix(ncol=28, nrow=28) %>% down_sample_image(factor=2)
scaled_pixels_data = scale(pixels_data)
scaled_pixels_data[is.na(scaled_pixels_data)] = 0 #Replacing NaN with 0
data_for_ml = cbind.data.frame(label=mnist.dat$label, scaled_pixels_data)
training_data = sample_n(data_for_ml, 5000)
#train.control = trainControl(method = "cv", number = 8)
#cv_model = train(label~., data=data_for_ml, method=c(multinom), trControl=train.control, maxit=1000)
#cv_model
#training_data = sample(data_for_ml, c(1:5000))
validation_data = setdiff(data_for_ml, training_data)
dim(validation_data)
trained_model = multinom(label ~ ., training_data, maxit=1000)
pixels_data = mnist.dat[,-1]
down_sampled_images = pixels_data %>% as.matrix(ncol=28, nrow=28) %>% down_sample_image(factor=2)
scaled_pixels_data = scale(down_sampled_images)
scaled_pixels_data[is.na(scaled_pixels_data)] = 0 #Replacing NaN with 0
data_for_ml = cbind.data.frame(label=mnist.dat$label, scaled_pixels_data)
training_data = sample_n(data_for_ml, 5000)
validation_data = setdiff(data_for_ml, training_data)
trained_model = multinom(label ~ ., training_data, maxit=1000)
trained_model = multinom(label ~ ., training_data, maxit=1000, MaxNWts=5000)
trained_model
predicted = predict(trained_model, validation_data[,-1])
confmat = table(validation_data$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
trained_model = multinom(label ~ ., training_data, MaxNWts=5000)
predicted = predict(trained_model, validation_data[,-1])
confmat = table(validation_data$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
trained_model = multinom(label ~ ., training_data, MaxNWts=5000, lambda = 0.01)
predicted = predict(trained_model, validation_data[,-1])
confmat = table(validation_data$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
View(validation_data)
view(predicted)
View(predicted)
View(training_data$label)
trained_model = multinom(label ~ ., training_data, MaxNWts=5000, maxit=2000, lambda = 0.015)
predicted = predict(trained_model, validation_data[,-1])
confmat = table(validation_data$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
#trained_model = multinom(label ~ ., training_data, MaxNWts=5000, maxit=2000, lambda = 0.015)
predicted = predict(trained_model, training_data[,-1])
confmat = table(training_data$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
library(OpenImageR)
library(dplyr)
library(iterators)
library(nnet)
library(reshape2)
library(ggplot2)
library(caret)
library(glmnet)
library(OpenImageR)
library(dplyr)
library(iterators)
library(nnet)
library(reshape2)
library(ggplot2)
library(caret)
library(glmnet)
trained_model = glmnet(label ~ ., training_data, MaxNWts=5000, maxit=2000, lambda = 0.015)
trained_model = glmnet(label ~ ., training_data, maxit=2000, lambda = 0.015)
trained_model = glmnet(label ~ ., training_data, lambda = 0.015)
trained_model = glmnet(training_data[,-1], training_data[,1], lambda = 0.015)
class(training_data[,1])
trained_model = glmnet(training_data[,-1], training_data[,1], family="multinomial", lambda = 0.015)
trained_model = glmnet(training_data[,-1], training_data[,1], family="multinomial",type.measure="class", lambda = 0.015)
trained_model = glmnet(as.matrix(training_data[,-1]), training_data[,1], family="multinomial", lambda = 0.015)
predicted = predict(trained_model, training_data[,-1])
View(predicted)
View(training_data$label)
class(training_data[,-1])
