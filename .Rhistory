# new_image[indices_cap_pixel_values] = 255
# image(as.matrix(new_image), axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
#
cleaned_images = t(apply(pixels_data, MARGIN = 1, FUN=function(x) replace(x, which(x < 5), 0)))
#combined_images = apply(cleaned_images, MARGIN=c(1,2), FUN=combine_images)
#combined_images = cleaned_images %>% combine_images()
actual_digit = combined_images[445,-1]
dim(combined_images)
dim(combined_images)
View(combined_images)
cleaned_images = t(apply(pixels_data, MARGIN = 1, FUN=function(x) replace(x, which(x < 5), 0)))
combined_images = apply(cleaned_images, MARGIN=c(1,2), FUN=combine_images)
dim(combined_images)
combined_images = cleaned_images %>% combine_images
cleaned_images = t(apply(pixels_data, MARGIN = 1, FUN=function(x) replace(x, which(x < 5), 0)))
#combined_images = apply(cleaned_images, MARGIN=c(1,2), FUN=combine_images)
combined_images = cleaned_images %>% combine_images
#actual_digit = combined_images[445,-1]
# digit_example = show_image_data(actual_digit)
# flipped_image = Augmentation(digit_example, flip_mode = "vertical")
#
# new_image = flipped_image + digit_example
#
# indices_cap_pixel_values = which(new_image>255)
#
# new_image[indices_cap_pixel_values] = 255
image(as.matrix(actual_digit), axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
View(combined_images)
class(cleaned_images)
cleaned_images = t(apply(pixels_data, MARGIN = 1, FUN=function(x) replace(x, which(x < 5), 0)))
# install.packages("OpenImageR")
# install.packages("dplyr")
# install.packages("iterators")
# install.packages("nnet")
# install.packages("reshape2")
# install.packages("ggplot2")
# install.packages("caret")
# install.packages("glmnet")
# install.packages("e1071")
library(OpenImageR)
library(dplyr)
library(iterators)
library(nnet)
library(reshape2)
library(ggplot2)
library(caret)
library(glmnet)
library(e1071)
mnist.dat <- read.csv("mnist.csv")
pixels_data = mnist.dat[,-1]
scaled_pixels_data = scale(pixels_data)
scaled_pixels_data[is.na(scaled_pixels_data)] = 0 #Replacing NaN with 0
mnist.dat$label = as.factor(mnist.dat$label)
show_image_from_data = function(data, row) {
sample_image = t(matrix(as.numeric(data[row,-1]),nrow=28,ncol=28,byrow=T)[c(28:1),,drop = FALSE])
return (image(sample_image, axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1))
}
show_image_data = function(actual_digit) {
return (t(matrix(as.numeric(actual_digit),nrow=28,ncol=28,byrow=T))[,c(28:1),drop = FALSE])
}
combine_images = function(normal_digit){
actual_digit = normal_digit
digit_example = show_image_data(actual_digit)
flipped_image = Augmentation(digit_example, flip_mode = "vertical")
new_image = flipped_image + digit_example
indices_cap_pixel_values = which(new_image>255)
new_image[indices_cap_pixel_values] = 255
#image(as.matrix(new_image), axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
return (new_image)
}
show_image_from_data(mnist.dat, 1)
mnist.summary = data.frame(t(sapply( pixels_data , function(x) cbind(mean = mean(x) ,
sd = sd(x) ,
median = median(x) ,
minimum = min(x) ,
maximum = max(x) ,
s.size = length(x)))))
colnames(mnist.summary) = c("mean","sd","median","minimum","maximum","size")
head(mnist.summary[mnist.summary$sd==0,])
indices_of_useless_features = which(mnist.summary$sd == 0)
actual_digit = mnist.dat[90,-1]
actual_digit[,indices_of_useless_features] = 125
digit_example = show_image_data(actual_digit)
image(digit_example, axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
indices_of_useless_features = which(mnist.summary$sd < 1)
actual_digit = mnist.dat[400,-1]
actual_digit[,indices_of_useless_features] = 125
digit_example = show_image_data(actual_digit)
image(digit_example, axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
# Plot count of each digit's pixel in barplot and then display it in a table
label_distribution = table(mnist.dat[,1])
barplot(label_distribution, col=rainbow(10, 0.5), main="Digits in dataset")
# as.data.frame(mnist.dat) %>% group_by(label) %>% summarise(count = n())
expected_accuracy_on_majority_label_classification = label_distribution[2] / sum(label_distribution)
sprintf("Accuracy if 1 was predicted for all labels: %.2f %%", expected_accuracy_on_majority_label_classification * 100)
actual_digit = mnist.dat[450,-1]
indices_of_useful_features = which(actual_digit < 248)
actual_digit[,indices_of_useful_features] = 0
digit_example = show_image_data(actual_digit)
image(digit_example, axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
hist(as.numeric(actual_digit), main="Frequency of pixels values", xlab="Pixel Value", ylab="Frequency")
hist.data = hist(as.matrix(mnist.dat[,-1]), breaks=32, main="Frequency of pixels values", xlab="Pixel Value", ylab="Frequency")
hist.data$counts = log10(hist.data$counts)
plot(hist.data, main="Frequency of scaled pixels values", xlab="Pixel Value", ylab="Frequency")
axis(side=1, at=seq(0, 256, 8))
cleaned_images = t(apply(pixels_data, MARGIN = 1, FUN=function(x) replace(x, which(x < 5), 0)))
image_density = apply(cleaned_images, MARGIN=1, FUN=function(x) sum(x))
image_density_per_pixel = apply(data.frame(image_density), MARGIN=1, FUN=function(x) sum(x)/784)
data = cbind.data.frame(density=image_density,
density_per_pixel=scale(image_density_per_pixel),
scaled_density = scale(image_density),
label=mnist.dat$label)
data2 = cbind.data.frame(log_dens=scale(log(image_density_per_pixel)),
sqrt_dens=scale(sqrt(image_density_per_pixel)),
sin_dens=scale(sin(image_density_per_pixel)),
tanh_dens=tanh(scale(image_density_per_pixel)),  #TODO: Explain why scale after
scaled_density = scale(image_density),
squared_dens=scale(image_density^2),
label=mnist.dat$label)
head(data)
head(data2)
summary_per_digit = rbind.data.frame(tapply(data$density_per_pixel, data$label,  function(x) cbind(mean = mean(x) ,
sd = sd(x) ,
median = median(x) ,
minimum = min(x) ,
maximum = max(x),
s.size = length(x))
))
rownames(summary_per_digit) = c("mean","sd","median","minimum","maximum","size")
#TODO: Plot all distributions
data.frame(t(summary_per_digit))
cormat = dist(t(summary_per_digit[c("mean","sd"),]))
data.frame(as.matrix(cormat))
cormat = dist(t(summary_per_digit[c("mean","sd","median","minimum","maximum"),]))
melted_cormat <- melt(as.matrix(cormat))
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
density_model = multinom(label ~ density_per_pixel, data, maxit=1000)
predicted = predict(density_model, data)
confmat = table(data$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
density_model2 = multinom(label ~ scaled_density + log_dens, data2, maxit=1000)
predicted = predict(density_model2, data2)
confmat = table(data2$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
cleaned_images = t(apply(pixels_data, MARGIN = 1, FUN=function(x) replace(x, which(x < 5), 0)))
combined_images = t(apply(cleaned_images, MARGIN=1, FUN=combine_images))
# combined_images = cleaned_images %>% combine_images
actual_digit = combined_images[445,-1]
# digit_example = show_image_data(actual_digit)
# flipped_image = Augmentation(digit_example, flip_mode = "vertical")
#
# new_image = flipped_image + digit_example
#
# indices_cap_pixel_values = which(new_image>255)
#
# new_image[indices_cap_pixel_values] = 255
image(as.matrix(actual_digit), axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
image(as.matrix(actual_digit), axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
dim(combined_images)
dim(cleaned_images)
image(actual_digit, axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
#cleaned_images = t(apply(pixels_data, MARGIN = 1, FUN=function(x) replace(x, which(x < 5), 0)))
combined_images = t(apply(pixels_data, MARGIN=1, FUN=combine_images))
# combined_images = cleaned_images %>% combine_images
actual_digit = combined_images[445,-1]
# digit_example = show_image_data(actual_digit)
# flipped_image = Augmentation(digit_example, flip_mode = "vertical")
#
# new_image = flipped_image + digit_example
#
# indices_cap_pixel_values = which(new_image>255)
#
# new_image[indices_cap_pixel_values] = 255
image(as.matrix(actual_digit), axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
image(actual_digit, axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
image(as.matrix(actual_digit), axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
# install.packages("OpenImageR")
# install.packages("dplyr")
# install.packages("iterators")
# install.packages("nnet")
# install.packages("reshape2")
# install.packages("ggplot2")
# install.packages("caret")
# install.packages("glmnet")
# install.packages("e1071")
library(OpenImageR)
library(dplyr)
library(iterators)
library(nnet)
library(reshape2)
library(ggplot2)
library(caret)
library(glmnet)
library(e1071)
mnist.dat <- read.csv("mnist.csv")
pixels_data = mnist.dat[,-1]
scaled_pixels_data = scale(pixels_data)
scaled_pixels_data[is.na(scaled_pixels_data)] = 0 #Replacing NaN with 0
mnist.dat$label = as.factor(mnist.dat$label)
show_image_from_data = function(data, row) {
sample_image = t(matrix(as.numeric(data[row,-1]),nrow=28,ncol=28,byrow=T)[c(28:1),,drop = FALSE])
return (image(sample_image, axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1))
}
show_image_data = function(actual_digit) {
return (t(matrix(as.numeric(actual_digit),nrow=28,ncol=28,byrow=T))[,c(28:1),drop = FALSE])
}
combine_images = function(normal_digit){
actual_digit = normal_digit
digit_example = show_image_data(actual_digit)
flipped_image = Augmentation(digit_example, flip_mode = "vertical")
new_image = flipped_image + digit_example
indices_cap_pixel_values = which(new_image>255)
new_image[indices_cap_pixel_values] = 255
return (new_image)
}
show_image_from_data(mnist.dat, 1)
mnist.summary = data.frame(t(sapply( pixels_data , function(x) cbind(mean = mean(x) ,
sd = sd(x) ,
median = median(x) ,
minimum = min(x) ,
maximum = max(x) ,
s.size = length(x)))))
colnames(mnist.summary) = c("mean","sd","median","minimum","maximum","size")
head(mnist.summary[mnist.summary$sd==0,])
indices_of_useless_features = which(mnist.summary$sd == 0)
actual_digit = mnist.dat[90,-1]
actual_digit[,indices_of_useless_features] = 125
digit_example = show_image_data(actual_digit)
image(digit_example, axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
indices_of_useless_features = which(mnist.summary$sd < 1)
actual_digit = mnist.dat[400,-1]
actual_digit[,indices_of_useless_features] = 125
digit_example = show_image_data(actual_digit)
image(digit_example, axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
# Plot count of each digit's pixel in barplot and then display it in a table
label_distribution = table(mnist.dat[,1])
barplot(label_distribution, col=rainbow(10, 0.5), main="Digits in dataset")
# as.data.frame(mnist.dat) %>% group_by(label) %>% summarise(count = n())
expected_accuracy_on_majority_label_classification = label_distribution[2] / sum(label_distribution)
sprintf("Accuracy if 1 was predicted for all labels: %.2f %%", expected_accuracy_on_majority_label_classification * 100)
actual_digit = mnist.dat[450,-1]
indices_of_useful_features = which(actual_digit < 248)
actual_digit[,indices_of_useful_features] = 0
digit_example = show_image_data(actual_digit)
image(digit_example, axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
hist(as.numeric(actual_digit), main="Frequency of pixels values", xlab="Pixel Value", ylab="Frequency")
hist.data = hist(as.matrix(mnist.dat[,-1]), breaks=32, main="Frequency of pixels values", xlab="Pixel Value", ylab="Frequency")
hist.data$counts = log10(hist.data$counts)
plot(hist.data, main="Frequency of scaled pixels values", xlab="Pixel Value", ylab="Frequency")
axis(side=1, at=seq(0, 256, 8))
cleaned_images = t(apply(pixels_data, MARGIN = 1, FUN=function(x) replace(x, which(x < 5), 0)))
image_density = apply(cleaned_images, MARGIN=1, FUN=function(x) sum(x))
image_density_per_pixel = apply(data.frame(image_density), MARGIN=1, FUN=function(x) sum(x)/784)
data = cbind.data.frame(density=image_density,
density_per_pixel=scale(image_density_per_pixel),
scaled_density = scale(image_density),
label=mnist.dat$label)
data2 = cbind.data.frame(log_dens=scale(log(image_density_per_pixel)),
sqrt_dens=scale(sqrt(image_density_per_pixel)),
sin_dens=scale(sin(image_density_per_pixel)),
tanh_dens=tanh(scale(image_density_per_pixel)),  #TODO: Explain why scale after
scaled_density = scale(image_density),
squared_dens=scale(image_density^2),
label=mnist.dat$label)
head(data)
head(data2)
summary_per_digit = rbind.data.frame(tapply(data$density_per_pixel, data$label,  function(x) cbind(mean = mean(x) ,
sd = sd(x) ,
median = median(x) ,
minimum = min(x) ,
maximum = max(x),
s.size = length(x))
))
rownames(summary_per_digit) = c("mean","sd","median","minimum","maximum","size")
#TODO: Plot all distributions
data.frame(t(summary_per_digit))
cormat = dist(t(summary_per_digit[c("mean","sd"),]))
data.frame(as.matrix(cormat))
cormat = dist(t(summary_per_digit[c("mean","sd","median","minimum","maximum"),]))
melted_cormat <- melt(as.matrix(cormat))
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) + geom_tile()
density_model = multinom(label ~ density_per_pixel, data, maxit=1000)
predicted = predict(density_model, data)
confmat = table(data$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
density_model2 = multinom(label ~ scaled_density + log_dens, data2, maxit=1000)
predicted = predict(density_model2, data2)
confmat = table(data2$label, predicted)
confmat
sum(diag(confmat))/sum(confmat)
cleaned_images = t(apply(pixels_data, MARGIN = 1, FUN=function(x) replace(x, which(x < 5), 0)))
combined_images = t(apply(pixels_data, MARGIN=1, FUN=combine_images))
# combined_images = cleaned_images %>% combine_images
#actual_digit = combined_images[445,-1]
# digit_example = show_image_data(actual_digit)
# flipped_image = Augmentation(digit_example, flip_mode = "vertical")
#
# new_image = flipped_image + digit_example
#
# indices_cap_pixel_values = which(new_image>255)
#
# new_image[indices_cap_pixel_values] = 255
image(as.matrix(actual_digit), axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
# combined_images = cleaned_images %>% combine_images
actual_digit = combined_images[445,-1]
# digit_example = show_image_data(actual_digit)
# flipped_image = Augmentation(digit_example, flip_mode = "vertical")
#
# new_image = flipped_image + digit_example
#
# indices_cap_pixel_values = which(new_image>255)
#
# new_image[indices_cap_pixel_values] = 255
image(as.matrix(actual_digit), axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
dim(combined_images)
# combined_images = cleaned_images %>% combine_images
actual_digit = combined_images[445,-1]
# digit_example = show_image_data(actual_digit)
# flipped_image = Augmentation(digit_example, flip_mode = "vertical")
#
# new_image = flipped_image + digit_example
#
# indices_cap_pixel_values = which(new_image>255)
#
# new_image[indices_cap_pixel_values] = 255
image(as.matrix(actual_digit, nrow=28,ncol=28,byrow=T), axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
dim(actual_digit)
dim(as.data.frame(actual_digit))
# combined_images = cleaned_images %>% combine_images
actual_digit = combined_images[445,]
# digit_example = show_image_data(actual_digit)
# flipped_image = Augmentation(digit_example, flip_mode = "vertical")
#
# new_image = flipped_image + digit_example
#
# indices_cap_pixel_values = which(new_image>255)
#
# new_image[indices_cap_pixel_values] = 255
image(as.matrix(actual_digit, nrow=28,ncol=28,byrow=T), axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
dim(as.data.frame(actual_digit))
# combined_images = cleaned_images %>% combine_images
actual_digit = combined_images[445,]
# digit_example = show_image_data(actual_digit)
# flipped_image = Augmentation(digit_example, flip_mode = "vertical")
#
# new_image = flipped_image + digit_example
#
# indices_cap_pixel_values = which(new_image>255)
#
# new_image[indices_cap_pixel_values] = 255
image(matrix(actual_digit, nrow=28,ncol=28,byrow=T), axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
# combined_images = cleaned_images %>% combine_images
actual_digit = combined_images[445,]
# digit_example = show_image_data(actual_digit)
# flipped_image = Augmentation(digit_example, flip_mode = "vertical")
#
# new_image = flipped_image + digit_example
#
# indices_cap_pixel_values = which(new_image>255)
#
# new_image[indices_cap_pixel_values] = 255
image(as.matrix(actual_digit, nrow=28,ncol=28,byrow=T), axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
# combined_images = cleaned_images %>% combine_images
actual_digit = combined_images[445,]
# digit_example = show_image_data(actual_digit)
# flipped_image = Augmentation(digit_example, flip_mode = "vertical")
#
# new_image = flipped_image + digit_example
#
# indices_cap_pixel_values = which(new_image>255)
#
# new_image[indices_cap_pixel_values] = 255
image(matrix(actual_digit, nrow=28,ncol=28,byrow=T), axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
cleaned_images = t(apply(pixels_data, MARGIN = 1, FUN=function(x) replace(x, which(x < 5), 0)))
combined_images = apply(pixels_data, MARGIN=1, FUN=combine_images)
cleaned_images = t(apply(pixels_data, MARGIN = 1, FUN=function(x) replace(x, which(x < 5), 0)))
combined_images = apply(cleaned_images, MARGIN=1, FUN=combine_images)
# combined_images = cleaned_images %>% combine_images
actual_digit = combined_images[445,]
# digit_example = show_image_data(actual_digit)
# flipped_image = Augmentation(digit_example, flip_mode = "vertical")
#
# new_image = flipped_image + digit_example
#
# indices_cap_pixel_values = which(new_image>255)
#
# new_image[indices_cap_pixel_values] = 255
image(matrix(actual_digit, nrow=28,ncol=28,byrow=T), axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
cleaned_images = t(apply(pixels_data, MARGIN = 1, FUN=function(x) replace(x, which(x < 5), 0)))
combined_images = apply(pixels_data, MARGIN=1, FUN=combine_images)
# combined_images = cleaned_images %>% combine_images
actual_digit = combined_images[445,]
# digit_example = show_image_data(actual_digit)
# flipped_image = Augmentation(digit_example, flip_mode = "vertical")
#
# new_image = flipped_image + digit_example
#
# indices_cap_pixel_values = which(new_image>255)
#
# new_image[indices_cap_pixel_values] = 255
image(matrix(actual_digit, nrow=28,ncol=28,byrow=T), axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
cleaned_images = t(apply(pixels_data, MARGIN = 1, FUN=function(x) replace(x, which(x < 5), 0)))
combined_images = t(apply(pixels_data, MARGIN=1, FUN=combine_images))
# combined_images = cleaned_images %>% combine_images
actual_digit = combined_images[445,]
# digit_example = show_image_data(actual_digit)
# flipped_image = Augmentation(digit_example, flip_mode = "vertical")
#
# new_image = flipped_image + digit_example
#
# indices_cap_pixel_values = which(new_image>255)
#
# new_image[indices_cap_pixel_values] = 255
image(matrix(actual_digit, nrow=28,ncol=28,byrow=T), axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
cleaned_images = t(apply(pixels_data, MARGIN = 1, FUN=function(x) replace(x, which(x < 5), 0)))
combined_images = t(apply(cleaned_images, MARGIN=1, FUN=combine_images))
# combined_images = cleaned_images %>% combine_images
actual_digit = combined_images[445,]
# digit_example = show_image_data(actual_digit)
# flipped_image = Augmentation(digit_example, flip_mode = "vertical")
#
# new_image = flipped_image + digit_example
#
# indices_cap_pixel_values = which(new_image>255)
#
# new_image[indices_cap_pixel_values] = 255
image(matrix(actual_digit, nrow=28,ncol=28,byrow=T), axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
cleaned_images = apply(pixels_data, MARGIN = 1, FUN=function(x) replace(x, which(x < 5), 0))
combined_images = apply(cleaned_images, MARGIN=1, FUN=combine_images)
# combined_images = cleaned_images %>% combine_images
actual_digit = combined_images[445,]
# digit_example = show_image_data(actual_digit)
# flipped_image = Augmentation(digit_example, flip_mode = "vertical")
#
# new_image = flipped_image + digit_example
#
# indices_cap_pixel_values = which(new_image>255)
#
# new_image[indices_cap_pixel_values] = 255
image(matrix(actual_digit, nrow=28,ncol=28,byrow=T), axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
cleaned_images = apply(pixels_data, MARGIN = 1, FUN=function(x) replace(x, which(x < 5), 0))
combined_images = apply(pixels_data, MARGIN=1, FUN=combine_images)
# combined_images = cleaned_images %>% combine_images
actual_digit = combined_images[445,]
# digit_example = show_image_data(actual_digit)
# flipped_image = Augmentation(digit_example, flip_mode = "vertical")
#
# new_image = flipped_image + digit_example
#
# indices_cap_pixel_values = which(new_image>255)
#
# new_image[indices_cap_pixel_values] = 255
image(matrix(actual_digit, nrow=28,ncol=28,byrow=T), axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
cleaned_images = t(apply(pixels_data, MARGIN = 1, FUN=function(x) replace(x, which(x < 5), 0)))
combined_images = t(apply(cleaned_images, MARGIN=1, FUN=combine_images))
# combined_images = cleaned_images %>% combine_images
actual_digit = combined_images[445,]
# digit_example = show_image_data(actual_digit)
# flipped_image = Augmentation(digit_example, flip_mode = "vertical")
#
# new_image = flipped_image + digit_example
#
# indices_cap_pixel_values = which(new_image>255)
#
# new_image[indices_cap_pixel_values] = 255
image(matrix(actual_digit, nrow=28,ncol=28,byrow=T), axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
dim(combined_images)
dim(t(combined_images))
show_image_from_data = function(data, row) {
sample_image = t(matrix(as.numeric(data[row,-1]),nrow=28,ncol=28,byrow=T)[c(28:1),,drop = FALSE])
return (image(sample_image, axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1))
}
show_image_data = function(actual_digit) {
return (t(matrix(as.numeric(actual_digit),nrow=28,ncol=28,byrow=T))[,c(28:1),drop = FALSE])
}
combine_images = function(normal_digit){
actual_digit = normal_digit
digit_example = show_image_data(actual_digit)
flipped_image = Augmentation(digit_example, flip_mode = "vertical")
new_image = flipped_image + digit_example
indices_cap_pixel_values = which(new_image>255)
new_image[indices_cap_pixel_values] = 255
return (t(new_image))
}
show_image_from_data(mnist.dat, 1)
# combined_images = cleaned_images %>% combine_images
actual_digit = combined_images[445,]
# digit_example = show_image_data(actual_digit)
# flipped_image = Augmentation(digit_example, flip_mode = "vertical")
#
# new_image = flipped_image + digit_example
#
# indices_cap_pixel_values = which(new_image>255)
#
# new_image[indices_cap_pixel_values] = 255
image(matrix(actual_digit, nrow=28,ncol=28,byrow=T), axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
cleaned_images = t(apply(pixels_data, MARGIN = 1, FUN=function(x) replace(x, which(x < 5), 0)))
combined_images = t(apply(cleaned_images, MARGIN=1, FUN=combine_images))
# combined_images = cleaned_images %>% combine_images
actual_digit = combined_images[445,]
# digit_example = show_image_data(actual_digit)
# flipped_image = Augmentation(digit_example, flip_mode = "vertical")
#
# new_image = flipped_image + digit_example
#
# indices_cap_pixel_values = which(new_image>255)
#
# new_image[indices_cap_pixel_values] = 255
image(matrix(actual_digit, nrow=28,ncol=28,byrow=T), axes = FALSE, col = grey(seq(0, 1, length = 256)), asp=1)
